pipeline {
  agent any
  options {
    // Don’t waste time checking out twice
    skipDefaultCheckout(true)
    // Avoid overlapping builds if pushes are frequent
    disableConcurrentBuilds()
    // Keep a clean workspace between runs
    cleanWs()
  }

  environment {
    FRONTEND_DIR = 'stan_blog_web'
    BACKEND_DIR  = 'stan_blog_service'
    EMAIL_TO     = 'lipohong@hotmail.com'
    HARBOR_URL      = 'harbor.stanli.site'
    HARBOR_PROJECT  = 'stan-blog-staging'
    HARBOR_CRED_ID  = 'SELF_HOSTED_HARBOR'
    IMAGE_TAG       = "${env.BUILD_NUMBER}-${env.GIT_COMMIT.take(7)}"
  }

  stages {
    stage('Checkout staging') {
      steps {
        checkout scm
        sh '''
          # Ensure we are on staging and up to date
          git fetch origin staging
          # If current branch is not staging, switch to it
          CURRENT_BRANCH="$(git rev-parse --abbrev-ref HEAD)"
          if [ "$CURRENT_BRANCH" != "staging" ]; then
            git checkout -B staging origin/staging
          else
            git reset --hard origin/staging
          fi
          git status --short --branch
        '''
      }
    }

    stage('Frontend Test') {
      when {
        beforeAgent true
        expression { env.FE_CHANGED == 'true' }
        branch 'staging'
      }
      steps {
        dir("${FRONTEND_DIR}") {
          echo "🔍 [Frontend] testing (changes detected on staging)…"
          sh '''
            set -eux
            npm ci || npm install
            npm run lint
          '''
        }
      }
    }

    stage('Backend Test') {
      when {
        beforeAgent true
        expression { env.BE_CHANGED == 'true' }
        branch 'staging'
      }
      steps {
        dir("${BACKEND_DIR}") {
          echo "🔍 [Backend] testing (changes detected on staging)…"
          sh '''
            set -eux
            mvn test
          '''
        }
      }
    }

    stage('Build & Push Backend Image') {
        when {
          beforeAgent true
          expression { env.BE_CHANGED == 'true' }
          branch 'staging'
        }
        steps {
          dir("${BACKEND_DIR}") {
            withCredentials([usernamePassword(credentialsId: env.HARBOR_CRED_ID,
                                              usernameVariable: 'HARBOR_USER',
                                              passwordVariable: 'HARBOR_PASS')]) {
              sh '''
                set -eux
                IMG_BACKEND=${HARBOR_URL}/${HARBOR_PROJECT}/stan-blog-backend:${IMAGE_TAG}

                echo "[Docker] Login Harbor"
                echo "${HARBOR_PASS}" | docker login ${HARBOR_URL} -u "${HARBOR_USER}" --password-stdin

                echo "[Docker] Build backend image ${IMG_BACKEND}"
                docker build -t ${IMG_BACKEND} -f Dockerfile .

                echo "[Docker] Push backend image"
                docker push ${IMG_BACKEND}
              '''
            }
          }
        }
      }

      stage('Build & Push Frontend Image') {
        when {
          beforeAgent true
          expression { env.FE_CHANGED == 'true' }
          branch 'staging'
        }
        steps {
          dir("${FRONTEND_DIR}") {
            withCredentials([usernamePassword(credentialsId: env.HARBOR_CRED_ID,
                                              usernameVariable: 'HARBOR_USER',
                                              passwordVariable: 'HARBOR_PASS')]) {
              sh '''
                set -eux
                IMG_FRONTEND=${HARBOR_URL}/${HARBOR_PROJECT}/stan-blog-web:${IMAGE_TAG}

                echo "[Docker] Login Harbor"
                echo "${HARBOR_PASS}" | docker login ${HARBOR_URL} -u "${HARBOR_USER}" --password-stdin

                echo "[Docker] Build frontend image ${IMG_FRONTEND}"
                docker build -t ${IMG_FRONTEND} -f Dockerfile .

                echo "[Docker] Push frontend image"
                docker push ${IMG_FRONTEND}
              '''
            }
          }
        }
      }
  }

  post {
    always {
      script {
        def summary = """
          Job: ${env.JOB_NAME}
          Build: #${env.BUILD_NUMBER}
          Branch: staging
          Result: ${currentBuild.currentResult}

          Backend changed: ${env.BE_CHANGED}
          Frontend changed: ${env.FE_CHANGED}

          Image Tags:
            BE -> ${HARBOR_URL}/${HARBOR_PROJECT}/stan_blog_service:${IMAGE_TAG}
            FE -> ${HARBOR_URL}/${HARBOR_PROJECT}/stan_blog_web:${IMAGE_TAG}

          Console: ${env.BUILD_URL}console
        """.stripIndent()

        emailext(
          to: env.EMAIL_TO,
          subject: "[${env.JOB_NAME}] #${env.BUILD_NUMBER} ${currentBuild.currentResult}",
          body: """<pre>${hudson.Functions.htmlEscape(summary)}</pre>""",
          mimeType: 'text/html'
        )
      }
    }
  }
}
